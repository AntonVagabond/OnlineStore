input {
  beats {
    port => 5044
    ssl_enabled => true
    ssl_key => "config/certs/elkstack-certs/elkstack-certs.key"
    ssl_certificate => "config/certs/elkstack-certs/elkstack-certs.crt"
    ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
  }
}

filter {
  # Преобразуем timestamp в формат, который понимает Elasticsearch
  date {
    match => ["asctime", "yyyy-MM-dd HH:mm:ss.SSS"]
    timezone => "UTC"
    target => "@timestamp"
    remove_field => ["asctime"]
  }
  # Преобразование строки message в JSON-формат
  if [message] and [message] =~ "^{.*}$" {
    mutate {
      # Преобразование строки в формат JSON
      gsub => [
        # Преобразуем 'key=value' в '"key":"value"'
        "message", "(\w+)=([^,{}]+)", '"\1":"\2"',
        # Убираем лишние пробелы после запятых
        "message", ", ", ","

      ]
    }

    json {
      source => "message"
      target => "log_message"
      remove_field => ["message"]
    }

    mutate {
      rename => {
        "[log_message][client_ip]" => "client_ip"
        "[log_message][client_port]" => "client_port"
        "[log_message][http_method]" => "http_method"
        "[log_message][http_path]" => "http_path"
        "[log_message][http_version]" => "http_version"
        "[log_message][http_status]" => "http_status"
        "[log_message][http_protocol]" => "http_protocol"
        "[log_message][http_host]" => "http_host"
        "[log_message][http_status_message]" => "message"
      }
      remove_field => ["log_message"]
    }
  }

  # Удалим пустые поля, если такие есть
  mutate {
    remove_field => [ "tags", "host" ]
  }
  mutate {
    add_field => { "[@metadata][index]" => "%{app}-%{+YYYY.MM.dd}" }
  }
}


output {
   elasticsearch {
     hosts => ["https://es01:9200"]
     user => "elastic"
     password => "elastic_store"
     ssl_enabled => true
     ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
     index => "%{[@metadata][index]}"
     data_stream => false
   }
}