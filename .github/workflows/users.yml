name: Users

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  WORKING_DIR: src/apps/users

jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: poetry install --no-root
      - name: Run linters for microservice users
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Запуск линтеров на чистоту кода и pep8.
          poetry run black --check --diff .
          poetry run isort --check-only --diff .
          poetry run flake8 .

  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DATABASE }}
        ports:
          - ${{ secrets.PG_PORT }}:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.PG_DATABASE }}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      PG_DATABASE: ${{ secrets.PG_DATABASE }}
      PG_PORT: ${{ secrets.PG_PORT }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'poetry'
    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIR }}
      run: poetry install --no-root --only main
    - name: Run pytest
      working-directory: ${{ env.WORKING_DIR }}
      run: poetry run pytest -v
